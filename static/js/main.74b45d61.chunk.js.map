{"version":3,"sources":["Components/Header/classes.ts","Components/Header/Header.tsx","Components/ProfileLayout/Header/classes.ts","Components/ProfileLayout/Header/Header.tsx","Pages/Profile/classes.ts","axiosInstance.ts","store/actionTypes/userActionTypes.ts","store/actions/userActions.ts","socket.js","store/actionTypes/chatsActionTypes.ts","Pages/Profile/Profile.tsx","Components/Drawer/classes.ts","Components/Drawer/Drawer.tsx","Components/ChatLayout/Header/classes.ts","Components/ChatLayout/Header/Header.tsx","Components/Footer/classes.ts","Components/Footer/Footer.tsx","Components/ChatLayout/Footer/classes.ts","store/actions/chatActions.ts","Components/ChatLayout/Footer/Footer.tsx","Components/Chat/Message/classes.ts","Components/Chat/Message/Message.tsx","Components/Chat/classes.ts","Components/Chat/Chat.tsx","Components/EditableField/classes.ts","Components/EditableField/EditableField.tsx","Pages/Chat/classes.ts","utils/util.js","Pages/Login/reducer/actionTypes.ts","Pages/Chat/Chat.tsx","Pages/ChatSettings/classes.ts","Pages/ChatSettings/ChatSettings.tsx","Components/LoginFormContainer/classes.ts","Components/LoginFormContainer/LoginFormContainer.tsx","Components/LoginForm/classes.ts","Components/LoginForm/LoginForm.tsx","Pages/Login/reducer/fieldsReducer.ts","Pages/Login/reducer/actions.ts","Pages/Login/classes.ts","Pages/Login/Login.tsx","App.tsx","serviceWorker.ts","store/reducers/user.ts","store/reducers/chats.ts","index.tsx"],"names":["makeStyles","theme","createStyles","title","flexGrow","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","open","children","classes","useStyles","AppBar","position","className","clsx","menuButton","marginRight","spacing","history","useHistory","Header","Toolbar","IconButton","color","aria-label","onClick","push","edge","Typography","root","display","flexWrap","textField","toolbar","alignItems","justifyContent","padding","mixins","card","details","flexDirection","content","flex","cover","axiosInstance","axios","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","LoginTypes","io","ChatTypes","login","email","password","dispatch","post","then","data","status","type","LOGIN","id","chatIds","userName","setItem","LOGIN_FAIL","catch","connect","state","user","userState","changeUserName","name","CHANGE_USER_NAME_SUCCESS","CHANGE_USER_NAME_FAIL","UserActions","changeUserStatus","CHANGE_STATUS_SUCCESS","CHANGE_STATUS_FAIL","useState","username","setUsername","userStatus","setUserStatus","Container","fixed","Card","CardContent","component","variant","CardMedia","image","Grid","container","item","xs","md","TextField","label","onChange","event","target","value","fullWidth","CardActions","Button","size","serverPath","openSocket","transportOptions","polling","extraHeaders","Error","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","hideScrollParent","overflow","height","hideScrollChild","overflowY","paddingRight","right","left","handleDrawerClose","useTheme","Drawer","paper","direction","Divider","hide","handleDrawerOpen","aria-controls","aria-haspopup","toolBar","bottomBar","top","bottom","input","backgroundColor","palette","common","white","borderRadius","shape","sendMessage","chatId","text","imageUrl","SEND_USER_MESSAGES_START","put","message","SEND_USER_MESSAGES_SUCCESS","SEND_USER_MESSAGES_FAIL","fetchChat","FETCH_CHAT_START","get","FETCH_CHAT_SUCCESS","chat","chatName","messages","FETCH_CHAT_FAIL","feedState","currentChat","ChatActions","messageText","setMessageText","Footer","disabled","row","marginTop","mine","notMine","maxWidth","header","marginBottom","paddingBottom","paddingTop","media","textContent","wordWrap","margin","expand","transform","shortest","expandOpen","avatar","red","isMine","author","date","CardHeader","Avatar","alt","subheader","paragraph","feed","alignContent","chats","userId","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","allIds","every","byId","ref","map","Message","creator","_id","key","createdAt","reverse","MaxWidth","grow","defaultValue","onSave","buttonText","setValue","isEditable","setIsEditable","disableElevation","paddingLeft","breakpoints","up","emit","obj","copyObj","copy","Array","i","hasOwnProperty","FieldName","VALIDATE_FIELDS","userChats","isAuth","fetchUserChats","FETCH_USER_CHATS_START","FETCH_USER_CHATS_SUCCESS","FETCH_USER_MESSAGES_FAIL","FETCH_USER_CHATS_FAIL","changeCurrentChat","CHANGE_CURRENT_CHAT","createNewChat","ADD_CHAT_START","ADD_CHAT_SUCCESS","ADD_CHAT_FAIL","receiveMessage","RECEIVE_MESSAGE","setConnectedUsers","users","SET_CONNECTED_USERS","connectedUsers","isDrawerOpen","setDrawerOpen","setTimeout","query","params","rawParams","replace","split","reduce","result","parseQuery","location","search","socketInstance","socket","on","payload","window","addEventListener","disconnect","err","console","error","List","ListItem","ListItemIcon","EditableField","button","ListItemText","primary","style","controllers","justify","ListSubheader","secondary","minHeight","actions","signInHandler","signUpHandler","ButtonGroup","inputField","fields","changeHandler","gutterBottom","noValidate","autoComplete","Object","entries","fieldName","valid","placeholder","InputLabelProps","shrink","initialState","reducer","action","all","fieldValue","length","validateFields","minWidth","modal","background","boxShadow","shadows","signIn","UserAction","signUp","isSignIn","setIsSignIn","useReducer","rootRef","React","to","Modal","disablePortal","disableEnforceFocus","disableAutoFocus","aria-labelledby","aria-describedby","LoginFormContainer","signInFields","values","LoginForm","changeField","withRouter","Boolean","path","exact","render","Profile","ChatSettings","Login","hostname","match","composeEnhancers","rootReducer","combineReducers","SET_AUTH","LOGOUT","icon","FETCH_USER_MESSAGES_SUCCESS","log","filter","index","self","findIndex","messageToCompare","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74b45d61.chunk.js","sourcesContent":["import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        appBarShift: {\r\n            marginLeft: drawerWidth,\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n    }),\r\n);\r\n","import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\n\r\nimport useStyles from './classes'\r\n\r\nexport default ({open, children}: {open?: boolean, children?: Array<JSX.Element> | JSX.Element}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <AppBar\r\n            position=\"fixed\"\r\n            className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: open,\r\n            })}\r\n        >\r\n            {children}\r\n        </AppBar>\r\n    )\r\n}\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n    }),\r\n);\r\n","import React from \"react\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Header from \"../../Header/Header\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport useStyles from './classes'\r\n\r\nexport default () => {\r\n    let history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Header>\r\n            <Toolbar>\r\n                <IconButton\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    onClick={() => {\r\n                        history.push(\"/\");\r\n                    }}\r\n                    edge=\"start\"\r\n                    className={classes.menuButton}\r\n                >\r\n                    <ArrowBackIosIcon/>\r\n                </IconButton>\r\n                <Typography/>\r\n            </Toolbar>\r\n        </Header>\r\n    )\r\n}\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: '100%',\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        toolbar: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            padding: theme.spacing(0, 1),\r\n            ...theme.mixins.toolbar,\r\n        },\r\n        card: {\r\n            display: 'flex',\r\n            justifyContent: \"space-between\",\r\n            flexWrap: \"wrap\"\r\n        },\r\n        details: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        content: {\r\n            flex: '1 0 auto',\r\n        },\r\n        cover: {\r\n            width: 151,\r\n        },\r\n    }),\r\n);\r\n","import axios from 'axios'\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://messenger-interview.herokuapp.com/'\r\n});\r\n\r\naxiosInstance.interceptors.request.use((config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    config.headers.Authorization = 'Bearer ' + token;\r\n    return config;\r\n});\r\n\r\nexport default axiosInstance;\r\n","export enum LoginTypes {\r\n    LOGIN = \"LOGIN\",\r\n    LOGIN_FAIL = \"LOGIN_FAIL\",\r\n    LOGOUT = \"LOGOUT\",\r\n    SET_AUTH = \"SET_AUTH\",\r\n\r\n    CHANGE_USER_NAME_SUCCESS = \"CHANGE_USER_NAME_SUCCESS\",\r\n    CHANGE_USER_NAME_FAIL = \"CHANGE_USER_NAME_FAIL\",\r\n\r\n    CHANGE_STATUS_SUCCESS = \"CHANGE_STATUS_SUCCESS\",\r\n    CHANGE_STATUS_FAIL = \"CHANGE_STATUS_FAIL\",\r\n}\r\n\r\ninterface ChangeUserNameSuccess {\r\n    type: LoginTypes.CHANGE_USER_NAME_SUCCESS,\r\n    name: string\r\n}\r\n\r\ninterface ChangeUserNameFail {\r\n    type: LoginTypes.CHANGE_USER_NAME_FAIL\r\n}\r\n\r\ninterface ChangeUserStatusSuccess {\r\n    type: LoginTypes.CHANGE_STATUS_SUCCESS,\r\n    status: string\r\n}\r\n\r\ninterface ChangeUserStatusFail {\r\n    type: LoginTypes.CHANGE_STATUS_FAIL\r\n}\r\n\r\ninterface LoginType {\r\n    type: LoginTypes.LOGIN,\r\n    id: string,\r\n    chatIds: ReadonlyArray<any>,\r\n    status: string,\r\n    userName: string,\r\n    token: string\r\n}\r\n\r\ninterface LoginFail {\r\n    type: LoginTypes.LOGIN_FAIL\r\n}\r\n\r\ninterface LogoutType {\r\n    type: LoginTypes.LOGOUT,\r\n}\r\n\r\ninterface SetAuth {\r\n    type: LoginTypes.SET_AUTH,\r\n}\r\n\r\nexport type LoginActionTypes = LoginType | LogoutType | LoginFail | SetAuth | ChangeUserNameSuccess | ChangeUserNameFail | ChangeUserStatusFail | ChangeUserStatusSuccess\r\n","import { Dispatch } from 'redux';\r\n\r\nimport axiosInstance from \"../../axiosInstance\";\r\nimport {LoginTypes} from \"../actionTypes/userActionTypes\";\r\nimport {ChatTypes} from \"../actionTypes/chatsActionTypes\";\r\n\r\nexport const login = (email:string, password:string) => {\r\n    return (dispatch:Dispatch) => {\r\n        axiosInstance.post('/auth/login', {\r\n            email: email,\r\n            password: password\r\n        }).then(({data, status}) => {\r\n            if (status !== 200){\r\n                dispatch({type: LoginTypes.LOGIN_FAIL})\r\n                return\r\n            }\r\n            dispatch({\r\n                type: LoginTypes.LOGIN,\r\n                id: data.id,\r\n                chatIds: data.chatIds,\r\n                status: data.status,\r\n                userName: data.userName,\r\n            })\r\n            localStorage.setItem('authToken', data.token)\r\n        }).catch(() => {\r\n            dispatch({type: LoginTypes.LOGIN_FAIL})\r\n        })\r\n    }\r\n}\r\n\r\nexport const fetchUser = () => {\r\n    return (dispatch:Dispatch) => {\r\n        axiosInstance.get('/auth/fetchUser').then(({data, status}) => {\r\n            if (status !== 200){\r\n                dispatch({type: LoginTypes.LOGIN_FAIL})\r\n                return\r\n            }\r\n            dispatch({\r\n                type: LoginTypes.LOGIN,\r\n                id: data.id,\r\n                chatIds: data.chatIds,\r\n                status: data.status,\r\n                userName: data.userName,\r\n            })\r\n            localStorage.setItem('authToken', data.token)\r\n        }).catch(() => {\r\n            dispatch({type: LoginTypes.LOGIN_FAIL})\r\n        })\r\n    }\r\n}\r\n\r\nexport const signUp = (email: string, name: string, password: string) => {\r\n    return (dispatch:Dispatch) => {\r\n        axiosInstance.put('/auth/signup', {\r\n            email: email,\r\n            password: password,\r\n            name: name\r\n        }).then(() => {\r\n            login(email, password)\r\n        }).catch(() => {\r\n            dispatch({type: LoginTypes.LOGIN_FAIL})\r\n        })\r\n    }\r\n}\r\n\r\nexport const changeUserName = (name: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        axiosInstance.post('/auth/updateUserName', {\r\n            name: name,\r\n        }).then(({data, status}) => {\r\n            if (status !== 200) {\r\n                dispatch({type: LoginTypes.CHANGE_USER_NAME_FAIL})\r\n                return\r\n            }\r\n            dispatch({\r\n                type: LoginTypes.CHANGE_USER_NAME_SUCCESS,\r\n                name: data.name\r\n            })\r\n        }).catch(() => {\r\n            dispatch({type: LoginTypes.CHANGE_USER_NAME_FAIL})\r\n        })\r\n    }\r\n}\r\n\r\nexport const changeUserStatus = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        axiosInstance.post('/auth/updateUserStatus', {\r\n            status: status,\r\n        }).then(({data, status}) => {\r\n            if (status !== 200) {\r\n                dispatch({type: LoginTypes.CHANGE_STATUS_FAIL,})\r\n                return\r\n            }\r\n            dispatch({\r\n                type: LoginTypes.CHANGE_STATUS_SUCCESS,\r\n                status: data.status\r\n            })\r\n        }).catch(() => {\r\n            dispatch({type: LoginTypes.CHANGE_STATUS_FAIL})\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return {type: LoginTypes.LOGOUT}\r\n}\r\n","import openSocket from 'socket.io-client';\r\n\r\nlet io;\r\n\r\nexport default {\r\n    init: (serverPath, token) => {\r\n        /*\r\n          extraHeaders: {},\r\n            doesn't work\r\n         */\r\n        io = openSocket(serverPath, {\r\n            transportOptions: {\r\n                polling: {\r\n                    extraHeaders: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                    },\r\n                },\r\n            },\r\n        });\r\n        return io;\r\n    },\r\n    getIO: () => {\r\n        if (!io) {\r\n            throw new Error('Socket.io not initialized!');\r\n        }\r\n        return io;\r\n    }\r\n};\r\n","import {Message, Chat, UserChats} from \"../reducers/chats\";\r\n\r\nexport enum ChatTypes {\r\n    FETCH_CHAT_START = \"FETCH_CHAT_START\",\r\n    FETCH_CHAT_SUCCESS = \"FETCH_CHAT_SUCCESS\",\r\n    FETCH_CHAT_FAIL = \"FETCH_CHAT_FAIL\",\r\n\r\n    ADD_CHAT_START = \"ADD_CHAT_START\",\r\n    ADD_CHAT_SUCCESS = \"ADD_CHAT_SUCCESS\",\r\n    ADD_CHAT_FAIL = \"ADD_CHAT_FAIL\",\r\n\r\n    FETCH_USER_CHATS_START = \"FETCH_USER_CHATS_START\",\r\n    FETCH_USER_CHATS_SUCCESS = \"FETCH_USER_CHATS_SUCCESS\",\r\n    FETCH_USER_CHATS_FAIL = \"FETCH_USER_CHATS_FAIL\",\r\n\r\n    FETCH_USER_MESSAGES_START = \"FETCH_USER_MESSAGES_START\",\r\n    FETCH_USER_MESSAGES_SUCCESS = \"FETCH_USER_MESSAGES_SUCCESS\",\r\n    FETCH_USER_MESSAGES_FAIL = \"FETCH_USER_MESSAGES_FAIL\",\r\n\r\n    SEND_USER_MESSAGES_START = \"SEND_USER_MESSAGES_START\",\r\n    SEND_USER_MESSAGES_SUCCESS = \"SEND_USER_MESSAGES_SUCCESS\",\r\n    SEND_USER_MESSAGES_FAIL = \"SEND_USER_MESSAGES_FAIL\",\r\n\r\n    RECEIVE_MESSAGE = \"RECEIVE_MESSAGE\",\r\n\r\n    SET_CONNECTED_USERS = \"SET_CONNECTED_USERS\",\r\n\r\n    CHANGE_CURRENT_CHAT = \"CHANGE_CURRENT_CHAT\",\r\n}\r\n\r\ninterface BaseChatAction {\r\n    type: ChatTypes,\r\n}\r\n\r\ninterface SetActiveUsers extends BaseChatAction {\r\n    type: ChatTypes.SET_CONNECTED_USERS,\r\n    chatId: number,\r\n    connectedUsers: number\r\n}\r\n\r\ninterface ReceiveMessage extends BaseChatAction {\r\n    type: ChatTypes.RECEIVE_MESSAGE,\r\n    message: Message,\r\n    chatId: number\r\n}\r\n\r\ninterface FetchUserChatsSuccess extends BaseChatAction {\r\n    type: ChatTypes.FETCH_USER_CHATS_SUCCESS,\r\n    userChats: UserChats\r\n}\r\n\r\ninterface FetchChatsSuccess extends BaseChatAction {\r\n    type: ChatTypes.FETCH_CHAT_SUCCESS,\r\n    chat: Chat,\r\n    chatId: number\r\n}\r\n\r\ninterface AddChatSuccess extends BaseChatAction {\r\n    type: ChatTypes.ADD_CHAT_SUCCESS,\r\n    chat: Chat\r\n    chatId: number\r\n}\r\n\r\ninterface ChangeChat extends BaseChatAction {\r\n    type: ChatTypes.CHANGE_CURRENT_CHAT,\r\n    chatId: number\r\n}\r\n\r\ninterface FetchUserMessagesSuccess extends BaseChatAction {\r\n    type: ChatTypes.FETCH_USER_MESSAGES_SUCCESS,\r\n    messages: ReadonlyArray<Message>,\r\n    chatId: number\r\n}\r\n\r\ninterface SendUserMessageSuccess extends BaseChatAction {\r\n    type: ChatTypes.SEND_USER_MESSAGES_SUCCESS,\r\n    message: Message,\r\n    chatId: number\r\n}\r\n\r\nexport type ChatsActionTypes = AddChatSuccess | ChangeChat | FetchUserChatsSuccess | FetchUserMessagesSuccess | SendUserMessageSuccess | FetchChatsSuccess | ReceiveMessage | SetActiveUsers\r\n","import React, {useState} from \"react\";\r\nimport {Container} from \"@material-ui/core\";\r\nimport Header from \"../../Components/ProfileLayout/Header/Header\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n\r\nimport useStyles from './classes'\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport * as UserActions from \"../../store/actions/userActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\n\r\nconst ProfilePage = ({user, changeUserName, changeUserStatus}) => {\r\n    const classes = useStyles();\r\n    const [username, setUsername] = useState(user.userName)\r\n    const [userStatus, setUserStatus] = useState(user.status)\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Container fixed>\r\n                <div className={classes.toolbar}/>\r\n                <Card className={classes.card}>\r\n                    {/*<Grid item xs={12}>*/}\r\n                    <div className={classes.details}>\r\n                        <CardContent className={classes.content}>\r\n                            <Typography component=\"h5\" variant=\"h5\">\r\n                                {user.userName}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                                {user.status}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </div>\r\n                    <CardMedia\r\n                        className={classes.cover}\r\n                        image=\"https://img3.stockfresh.com/files/z/zdenkam/m/61/7129871_stock-photo-casual-man-on-white.jpg\"\r\n                        title=\"Live from space album cover\"\r\n                    />\r\n                    {/*</Grid>*/}\r\n                    <CardContent>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={12} md={6}>\r\n                                <TextField\r\n                                    label=\"Edit username\"\r\n                                    className={classes.textField}\r\n                                    onChange={(event) => setUsername(event.target.value)}\r\n                                    value={username}\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <TextField\r\n                                    label=\"Edit status\"\r\n                                    value={userStatus}\r\n                                    onChange={(event) => setUserStatus(event.target.value)}\r\n                                    className={classes.textField}\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                        <Button size=\"small\" color=\"primary\" onClick={() => {\r\n                            changeUserName(username)\r\n                            changeUserStatus(userStatus)\r\n                        }}>\r\n                            save\r\n                        </Button>\r\n                        <Button size=\"small\" color=\"primary\" onClick={() => {\r\n                            setUsername(user.userName)\r\n                            setUserStatus(user.status)\r\n                        }}>\r\n                            exit\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n// @ts-ignore\r\n        changeUserName: (name) => dispatch(UserActions.changeUserName(name)),\r\n// @ts-ignore\r\n        changeUserStatus: (status) => dispatch(UserActions.changeUserStatus(status)),\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.userState.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfilePage)\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        drawer: {\r\n            position: \"fixed\",\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n            whiteSpace: 'nowrap',\r\n        },\r\n        drawerOpen: {\r\n            width: drawerWidth,\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        drawerClose: {\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n            overflowX: 'hidden',\r\n            width: theme.spacing(7) + 1,\r\n        },\r\n        toolbar: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            padding: theme.spacing(0, 1),\r\n            ...theme.mixins.toolbar,\r\n        },\r\n        hideScrollParent: {\r\n            position: \"relative\",\r\n            overflow: \"hidden\",\r\n            height: \"100vh\",\r\n            padding: 0,\r\n        },\r\n        hideScrollChild: {\r\n            height: \"100%\",\r\n            position: \"absolute\",\r\n            overflowY: \"scroll\",\r\n            overflowX: \"hidden\",\r\n            paddingRight: 20,\r\n            right: -20,\r\n            left: 0,\r\n            '& > *': {\r\n                width: \"calc(100% + 20px)\"\r\n            }\r\n        }\r\n    }),\r\n);\r\n","import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport {useTheme} from \"@material-ui/core/styles\";\r\n\r\nimport useStyles from './classes'\r\n\r\nexport default ({open, children, handleDrawerClose}: {open: boolean, children: Array<JSX.Element> | JSX.Element, handleDrawerClose: Function}) => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Drawer\r\n            variant=\"permanent\"\r\n            className={clsx(classes.drawer, {\r\n                [classes.drawerOpen]: open,\r\n                [classes.drawerClose]: !open,\r\n            })}\r\n            classes={{\r\n                paper: clsx({\r\n                    [classes.drawerOpen]: open,\r\n                    [classes.drawerClose]: !open,\r\n                }),\r\n            }}\r\n        >\r\n            <div className={classes.toolbar}>\r\n                <IconButton onClick={() => handleDrawerClose()}>\r\n                    {theme.direction === 'rtl' ? <ChevronRightIcon/> : <ChevronLeftIcon/>}\r\n                </IconButton>\r\n            </div>\r\n            <Divider/>\r\n            <div className={classes.hideScrollParent}>\r\n                <div className={classes.hideScrollChild}>\r\n                    {children}\r\n                    <div className={classes.toolbar}/>\r\n                </div>\r\n            </div>\r\n        </Drawer>\r\n    )\r\n}\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        toolbar: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            padding: theme.spacing(0, 1),\r\n            ...theme.mixins.toolbar,\r\n        },\r\n    }),\r\n);\r\n","import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Header from \"../../Header/Header\";\r\n\r\nimport useStyles from './classes'\r\n\r\nexport default ({open, handleDrawerOpen}: {open: boolean; handleDrawerOpen: Function}) => {\r\n    const classes = useStyles();\r\n    let history = useHistory();\r\n\r\n    return (\r\n        <Header open={open}>\r\n            <Toolbar>\r\n                <IconButton\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    onClick={() => handleDrawerOpen()}\r\n                    edge=\"start\"\r\n                    className={clsx(classes.menuButton, {\r\n                        [classes.hide]: open,\r\n                    })}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n                <Typography className={classes.title}/>\r\n\r\n                <div>\r\n                    <IconButton\r\n                        aria-label=\"account of current user\"\r\n                        aria-controls=\"menu-appbar\"\r\n                        aria-haspopup=\"true\"\r\n                        onClick={() => {\r\n                            history.push(\"/profile\");\r\n                        }}\r\n                        color=\"inherit\"\r\n                    >\r\n                        <AccountCircle/>\r\n                    </IconButton>\r\n                </div>\r\n            </Toolbar>\r\n        </Header>\r\n    )\r\n}\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        toolBar: {\r\n            width: \"100%\",\r\n            display: \"flex\",\r\n            flexWrap: \"nowrap\"\r\n        },\r\n        bottomBar: {\r\n            top: 'auto',\r\n            bottom: 0,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            padding: theme.spacing(0, 1),\r\n            ...theme.mixins.toolbar,\r\n        },\r\n    }),\r\n);\r\n","import React from \"react\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\n\r\nimport useStyles from './classes'\r\n\r\nexport default ({children}: {children: Array<JSX.Element> | JSX.Element}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <AppBar position=\"fixed\" className={classes.bottomBar} component={\"div\"}>\r\n            <Toolbar className={classes.toolBar}>\r\n                {children}\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        bottomBar: {\r\n            top: 'auto',\r\n            bottom: 0,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            padding: theme.spacing(0, 1),\r\n            ...theme.mixins.toolbar,\r\n        },\r\n        input: {\r\n            backgroundColor: theme.palette.common.white,\r\n            borderRadius: theme.shape.borderRadius\r\n        }\r\n    }),\r\n);\r\n","import axiosInstance from \"../../axiosInstance\";\r\nimport {Dispatch} from 'redux';\r\nimport {ChatTypes} from \"../actionTypes/chatsActionTypes\";\r\nimport {LoginTypes} from \"../actionTypes/userActionTypes\";\r\n\r\nexport const receiveMessage = (chatId: string, message) => {\r\n    return {\r\n        type: ChatTypes.RECEIVE_MESSAGE,\r\n        message: message,\r\n        chatId: chatId\r\n    }\r\n}\r\n\r\nexport const setConnectedUsers = (chatId: string, users) => {\r\n    return {\r\n        type: ChatTypes.SET_CONNECTED_USERS,\r\n        chatId: chatId,\r\n        connectedUsers: users\r\n    }\r\n}\r\n\r\nexport const sendMessage = (chatId: string, text: string, imageUrl: string | null) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch({type: ChatTypes.SEND_USER_MESSAGES_START})\r\n        axiosInstance.put('/message/send', {\r\n            chatId: chatId,\r\n            message: text\r\n        }).then(({data, status}) => {\r\n            if (status !== 201) {\r\n                dispatch({type: ChatTypes.SEND_USER_MESSAGES_FAIL})\r\n                return\r\n            }\r\n            dispatch({\r\n                type: ChatTypes.SEND_USER_MESSAGES_SUCCESS,\r\n                chatId: chatId,\r\n                message: data.message\r\n            })\r\n        }).catch(() => {\r\n            dispatch({type: ChatTypes.SEND_USER_MESSAGES_FAIL})\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const fetchMessages = (chatId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch({type: ChatTypes.SEND_USER_MESSAGES_START})\r\n        axiosInstance.get(`/message/${chatId}`).then(({data, status}) => {\r\n            if (status !== 201) {\r\n                dispatch({type: ChatTypes.FETCH_USER_MESSAGES_FAIL})\r\n                return\r\n            }\r\n            dispatch({\r\n                type: ChatTypes.FETCH_USER_MESSAGES_SUCCESS,\r\n                chatId: chatId,\r\n                messages: data.messages\r\n            })\r\n        }).catch(() => {\r\n            dispatch({type: ChatTypes.FETCH_USER_MESSAGES_FAIL})\r\n        })\r\n    }\r\n}\r\n\r\nexport const fetchUserChats = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch({type: ChatTypes.FETCH_USER_CHATS_START})\r\n        axiosInstance.get('/chat/userChats').then(({data, status}) => {\r\n            if (status !== 200) {\r\n                dispatch({type: ChatTypes.FETCH_USER_MESSAGES_FAIL})\r\n                return\r\n            }\r\n            dispatch({\r\n                type: ChatTypes.FETCH_USER_CHATS_SUCCESS,\r\n                userChats: data.userChats,\r\n                chatId: data.chatId\r\n            })\r\n        }).catch(() => {\r\n            dispatch({type: ChatTypes.FETCH_USER_CHATS_FAIL})\r\n        })\r\n    }\r\n}\r\n\r\nexport const fetchChat = (chatId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch({type: ChatTypes.FETCH_CHAT_START})\r\n        axiosInstance.get(`/chat/${chatId}`).then(({data, status}) => {\r\n            if (status !== 200) {\r\n                dispatch({type: ChatTypes.FETCH_CHAT_FAIL})\r\n                return\r\n            }\r\n\r\n            dispatch({\r\n                type: ChatTypes.FETCH_CHAT_SUCCESS,\r\n                chat: {\r\n                    chatName: data.title,\r\n                    messages: data.messages\r\n                },\r\n                chatId: chatId\r\n            })\r\n        }).catch(() => {\r\n            dispatch({type: ChatTypes.FETCH_CHAT_FAIL})\r\n        })\r\n    }\r\n}\r\n\r\nexport const changeChat = (chatId: string) => {\r\n    return {\r\n        type: ChatTypes.CHANGE_CURRENT_CHAT,\r\n        chatId: chatId\r\n    }\r\n}\r\n\r\nexport const addChat = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch({type: ChatTypes.ADD_CHAT_START})\r\n        axiosInstance.post('/chat/create', {\r\n            title: title\r\n        }).then(({data, status}) => {\r\n            if (status !== 200) {\r\n                dispatch({type: ChatTypes.ADD_CHAT_FAIL})\r\n                return\r\n            }\r\n\r\n            dispatch({\r\n                type: ChatTypes.ADD_CHAT_SUCCESS,\r\n                chat: {\r\n                    chatName: data.title,\r\n                    messages: data.messages\r\n                },\r\n                chatId: data.chatId\r\n            })\r\n        }).catch(() => {\r\n            dispatch({type: ChatTypes.ADD_CHAT_FAIL})\r\n        })\r\n    }\r\n}\r\n","import React, {useState} from \"react\";\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport Footer from \"../../Footer/Footer\";\r\n\r\nimport useStyles from './classes'\r\nimport {Dispatch} from \"redux\";\r\nimport * as ChatActions from \"../../../store/actions/chatActions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst MessageSender = ({chatId, sendMessage}: {chatId: string, sendMessage: Function}) => {\r\n    const classes = useStyles();\r\n    const [messageText, setMessageText] = useState(\"\")\r\n\r\n    return (\r\n        <Footer>\r\n            <IconButton\r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={() => {\r\n                }}\r\n                color=\"inherit\"\r\n                disabled\r\n            >\r\n                <ImageIcon/>\r\n            </IconButton>\r\n            <TextField\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                fullWidth\r\n                className={classes.input}\r\n                value={messageText}\r\n                onChange={(event) => setMessageText(event.target.value)}\r\n            />\r\n            <IconButton\r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={() => {\r\n                    setMessageText(\"\")\r\n                    sendMessage(chatId, messageText)\r\n                }}\r\n                color=\"inherit\"\r\n            >\r\n                <SendIcon/>\r\n            </IconButton>\r\n        </Footer>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        // @ts-ignore\r\n        sendMessage: (chatId: string, text: string) => dispatch(ChatActions.sendMessage(chatId, text)),\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        chatId: state.feedState.currentChat,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageSender)\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {red} from '@material-ui/core/colors';\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        row: {\r\n            width: \"100%\",\r\n            display: \"flex\",\r\n            marginTop: theme.spacing(1)\r\n        },\r\n        mine: {\r\n            justifyContent: \"flex-end\"\r\n        },\r\n        notMine: {\r\n            justifyContent: \"flex-start\"\r\n        },\r\n        message: {\r\n            width: 320,\r\n            maxWidth: \"80%\",\r\n        },\r\n        header: {\r\n            marginBottom: theme.spacing(1),\r\n            marginTop: theme.spacing(1),\r\n            paddingBottom: 0,\r\n            paddingTop: 0\r\n        },\r\n        media: {\r\n            height: 0,\r\n            paddingTop: '56.25%', // 16:9\r\n        },\r\n        textContent:{\r\n            paddingTop: 0,\r\n            paddingBottom: 0,\r\n            marginBottom: theme.spacing(1),\r\n            marginTop: theme.spacing(1),\r\n        },\r\n        text: {\r\n            wordWrap: \"break-word\",\r\n            paddingBottom: 0,\r\n            paddingTop: 0,\r\n            margin: 0\r\n        },\r\n        expand: {\r\n            transform: 'rotate(0deg)',\r\n            marginLeft: 'auto',\r\n            transition: theme.transitions.create('transform', {\r\n                duration: theme.transitions.duration.shortest,\r\n            }),\r\n        },\r\n        expandOpen: {\r\n            transform: 'rotate(180deg)',\r\n        },\r\n        avatar: {\r\n            backgroundColor: red[500],\r\n            position: \"static\"\r\n        },\r\n    }),\r\n);\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport useStyles from './classes'\r\n\r\nexport default ({text, isMine, author, imageUrl, date}: { text: string, isMine: boolean, author: string, imageUrl: string | null, date: string }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={clsx(classes.row, {\r\n            [classes.mine]: isMine,\r\n            [classes.notMine]: !isMine\r\n        })}>\r\n            <Card className={clsx(classes.message)}>\r\n                <CardHeader\r\n                    avatar={\r\n                        <Avatar alt={author} className={classes.avatar}/>\r\n                    }\r\n                    title={author}\r\n                    subheader={date}\r\n                    className={classes.header}\r\n                />\r\n                {\r\n                    imageUrl ?\r\n                        <CardMedia\r\n                            className={classes.media}\r\n                            image={imageUrl}\r\n                            title=\"Paella dish\"\r\n                        /> : null\r\n                }\r\n                <CardContent className={classes.textContent}>\r\n                    <Typography className={classes.text} paragraph color=\"textSecondary\" component=\"p\">\r\n                        {text}\r\n                    </Typography>\r\n                </CardContent>\r\n                <div/>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        feed: {\r\n            display: \"flex\",\r\n            flexWrap: \"wrap\",\r\n            flexDirection: \"column-reverse\",\r\n            alignContent: \"flex-end\",\r\n            width: \"100%\",\r\n            marginBottom: theme.spacing(1)\r\n        },\r\n    }),\r\n);\r\n","import React, {useEffect, useRef} from 'react'\r\n\r\nimport Message from \"./Message/Message\";\r\n\r\nimport useStyles from './classes'\r\nimport {Dispatch} from \"redux\";\r\nimport * as ChatActions from \"../../store/actions/chatActions\";\r\nimport {connect} from \"react-redux\";\r\nimport {Chats} from \"../../store/reducers/chats\";\r\n\r\nconst Chat = ({currentChat, chats, userId, fetchChat}: {currentChat: string, chats: Chats, userId: string, fetchChat: Function}) => {\r\n    const classes = useStyles();\r\n\r\n    const messagesEndRef = useRef(null)\r\n\r\n    // @ts-ignore\r\n    const scrollToBottom = () => messagesEndRef.current.scrollIntoView({behavior: \"smooth\"});\r\n\r\n    useEffect(scrollToBottom, [chats, currentChat]);\r\n    useEffect(() => {\r\n        // @ts-ignore\r\n        if (currentChat !== 0 && chats.allIds.every(chatId => chatId !== currentChat))\r\n            fetchChat(currentChat)\r\n    }, [currentChat])\r\n\r\n    const chat = chats.byId[currentChat]\r\n    const messages = chat ? chat.messages : null\r\n    return (\r\n        <div className={classes.feed}>\r\n            <span ref={messagesEndRef}/>\r\n\r\n            {messages ? messages.map(message => {\r\n                return (\r\n                    <Message author={message.creator.name}\r\n                             imageUrl={null}\r\n                             text={message.text}\r\n                             isMine={userId === message.creator._id}\r\n                             key={message._id}\r\n                             date={message.createdAt}\r\n                    />\r\n                )\r\n            }).reverse() : null}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        // @ts-ignore\r\n        fetchChat: (chatId) => dispatch(ChatActions.fetchChat(chatId)),\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        chats: state.feedState.chats,\r\n        currentChat: state.feedState.currentChat,\r\n        userId: state.userState.user.id,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat)\r\n","import {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        container: {\r\n            display: \"flex\",\r\n            MaxWidth: \"100%\",\r\n            flexWrap: \"nowrap\",\r\n        },\r\n        grow: {\r\n            flexGrow: 1,\r\n            flexShrink: 1\r\n        }\r\n    }),\r\n);\r\n","import React, {useState} from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nimport useStyles from './classes'\r\n\r\nexport default ({defaultValue, onSave, buttonText}: { defaultValue?: string, onSave: Function, buttonText: string }) => {\r\n    const classes = useStyles();\r\n    const [value, setValue] = useState(defaultValue ? defaultValue : \"\")\r\n    const [isEditable, setIsEditable] = useState(false)\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            {\r\n                isEditable ? (\r\n                    <>\r\n                        <IconButton\r\n                            onClick={() => {\r\n                                setValue('')\r\n                                setIsEditable(false)\r\n                            }}\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                        >\r\n                            <ClearIcon/>\r\n                        </IconButton>\r\n                        <TextField\r\n                            onChange={(event) => setValue(event.target.value)}\r\n                            label=\"Filled\"\r\n                            variant=\"filled\"\r\n                            value={value}\r\n                            className={classes.grow}\r\n                            size=\"small\"\r\n                        />\r\n                        <IconButton\r\n                            onClick={() => {\r\n                                setIsEditable(false)\r\n                                onSave(value)\r\n                                setValue(\"\")\r\n                            }}\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                        >\r\n                            <DoneIcon/>\r\n                        </IconButton>\r\n                    </>\r\n                ) : (\r\n                    <div>\r\n                        <Button\r\n                            onClick={() => {\r\n                                setIsEditable(true)\r\n                            }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disableElevation\r\n                            className={classes.grow}\r\n                        >\r\n                            {buttonText}\r\n                        </Button>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        bottomBar: {\r\n            top: 'auto',\r\n            bottom: 0,\r\n            paddingTop: theme.spacing(1),\r\n            paddingBottom: theme.spacing(1),\r\n            padding: 0\r\n        },\r\n        appBarShift: {\r\n            marginLeft: drawerWidth,\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        toolbar: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            padding: theme.spacing(0, 1),\r\n            ...theme.mixins.toolbar,\r\n        },\r\n        content: {\r\n            flexGrow: 1,\r\n            paddingLeft: theme.spacing(2),\r\n            paddingRight: theme.spacing(2),\r\n            marginLeft: theme.spacing(7) + 1,\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: theme.spacing(9) + 1,\r\n            },\r\n            minHeight: \"100vh\"\r\n        },\r\n        chat: {\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            alignContent: \"flex-end\",\r\n            flexWrap: \"wrap\"\r\n        },\r\n        hideScrollParent: {\r\n            position: \"relative\",\r\n            overflow: \"hidden\",\r\n            height: \"100vh\",\r\n            padding: 0,\r\n        },\r\n        hideScrollChild: {\r\n            height: \"100%\",\r\n            position: \"absolute\",\r\n            overflowY: \"scroll\",\r\n            overflowX: \"hidden\",\r\n            paddingRight: 20,\r\n            right: -20,\r\n            left: 0,\r\n            '& > *': {\r\n                width: \"calc(100% + 20px)\"\r\n            }\r\n        }\r\n    }),\r\n);\r\n","export const emit = (obj, key) => {\r\n    const {[key]: redundant, ...result} = copyObj(obj)\r\n\r\n    return result\r\n}\r\n\r\nfunction copyObj(obj) {\r\n    if (!obj || typeof(obj) != \"object\") {\r\n        return obj;\r\n    }\r\n\r\n    let copy = (obj instanceof Array) ? [] : {};\r\n    for (let i in obj) {\r\n        if (obj.hasOwnProperty(i)) {\r\n            copy[i] = copyObj(obj[i]);\r\n        }\r\n    }\r\n    return copy;\r\n}\r\n\r\nexport const parseQuery = (params = \"\") => {\r\n    const rawParams = params.replace(\"?\", \"\").split(\"&\");\r\n    return rawParams.reduce((result, item) => {\r\n        const [key, value] = item.split(\"=\")\r\n        return {\r\n            ...result,\r\n            [key]: value\r\n        }\r\n    }, {});\r\n};\r\n","export enum FieldName {\r\n    email = \"email\",\r\n    username = \"username\",\r\n    password = \"password\"\r\n}\r\n\r\nexport enum VALIDATE_FIELDS {\r\n    all,\r\n    specific\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from 'redux';\r\nimport socket from '../../socket'\r\n\r\nimport Drawer from \"../../Components/Drawer/Drawer\";\r\nimport Header from \"../../Components/ChatLayout/Header/Header\";\r\nimport Footer from \"../../Components/ChatLayout/Footer/Footer\";\r\nimport Chat from \"../../Components/Chat/Chat\";\r\nimport EditableField from \"../../Components/EditableField/EditableField\";\r\n\r\nimport useStyles from './classes'\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport * as ChatActions from \"../../store/actions/chatActions\";\r\nimport {Chats} from \"../../store/reducers/chats\";\r\nimport {parseQuery} from \"../../utils/util\";\r\n\r\nconst ChatPage = ({isAuth, userChats, currentChat, fetchUserChats, changeCurrentChat, createNewChat, receiveMessage, setConnectedUsers}: { isAuth: boolean, userChats: Chats, currentChat: number, fetchUserChats: Function, changeCurrentChat: Function, createNewChat: Function, receiveMessage: Function, setConnectedUsers: Function }) => {\r\n    let history = useHistory();\r\n    const classes = useStyles();\r\n    const [isDrawerOpen, setDrawerOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            if (!isAuth)\r\n                history.push('/login')\r\n        }, 1500)\r\n        fetchUserChats()\r\n        const query = parseQuery(history.location.search)\r\n        // @ts-ignore\r\n        if (query.hasOwnProperty('chat'))\r\n            // @ts-ignore\r\n            if (query.chat !== 0)\r\n                // @ts-ignore\r\n                changeCurrentChat(query.chat)\r\n            else\r\n                changeCurrentChat(userChats[0])\r\n\r\n        const token = localStorage.getItem('authToken');\r\n\r\n        if (token) {\r\n            const socketInstance = socket.init('http://localhost:8080', token)\r\n\r\n            socketInstance.on(\"message\", payload => {\r\n                receiveMessage(payload.chatId, payload.message)\r\n            })\r\n\r\n            socketInstance.on(\"userConnected\", payload => {\r\n                setConnectedUsers(payload.chatId, payload.users)\r\n            })\r\n\r\n            socketInstance.on(\"userDisconnected\", payload => {\r\n                setConnectedUsers(payload.chatId, payload.users)\r\n            })\r\n\r\n            window.addEventListener('beforeunload', socketInstance.disconnect);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (currentChat === 0)\r\n            return\r\n\r\n        try {\r\n            const socketInstance = socket.getIO()\r\n            socketInstance.emit(\"room\", {\r\n                chatId: currentChat,\r\n            })\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n\r\n        history.replace({\r\n            search: `?chat=${currentChat}`\r\n        })\r\n    }, [currentChat])\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Header open={isDrawerOpen} handleDrawerOpen={() => setDrawerOpen(true)}/>\r\n            <Drawer open={isDrawerOpen} handleDrawerClose={() => setDrawerOpen(false)}>\r\n                <List>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <AddBoxIcon/>\r\n                        </ListItemIcon>\r\n                        <EditableField\r\n                            onSave={(title) => {\r\n                                createNewChat(title)\r\n                            }}\r\n                            buttonText=\"Create chat\"\r\n                        />\r\n                    </ListItem>\r\n                    {userChats.allIds.map((chatId) => (\r\n                        <ListItem\r\n                            button key={chatId}\r\n                            onClick={() => changeCurrentChat(chatId)}\r\n                        >\r\n                            <ListItemIcon>\r\n                                <InboxIcon/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={userChats.byId[chatId].chatName}/>\r\n                            <ListItemIcon style={{justifyContent: \"flex-end\"}}>\r\n                                <IconButton\r\n                                    aria-label=\"account of current user\"\r\n                                    aria-controls=\"menu-appbar\"\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={() => {\r\n                                        history.push(\"/chatSettings\");\r\n                                    }}\r\n                                    size=\"small\"\r\n                                    color=\"inherit\"\r\n                                >\r\n                                    <MoreVertIcon/>\r\n                                </IconButton>\r\n                            </ListItemIcon>\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <div className={classes.chat}>\r\n                    <div className={classes.toolbar}/>\r\n                    <Chat/>\r\n                    <div className={classes.toolbar}/>\r\n                </div>\r\n            </main>\r\n            <Footer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        // @ts-ignore\r\n        sendMessage: (text: string, chatId: string, imageUrl = null) => dispatch(ChatActions.sendMessage(chatId, text, imageUrl)),\r\n        // @ts-ignore\r\n        fetchUserChats: () => dispatch(ChatActions.fetchUserChats()),\r\n        // @ts-ignore\r\n        changeCurrentChat: (chatId: string) => dispatch(ChatActions.changeChat(chatId)),\r\n        // @ts-ignore\r\n        createNewChat: (title: string) => dispatch(ChatActions.addChat(title)),\r\n        // @ts-ignore\r\n        receiveMessage: (chatId: string, message) => dispatch(ChatActions.receiveMessage(chatId, message)),\r\n        // @ts-ignore\r\n        setConnectedUsers: (chatId, users) => dispatch(ChatActions.setConnectedUsers(chatId, users))\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userChats: state.feedState.userChats,\r\n        currentChat: state.feedState.currentChat,\r\n        token: state.userState.token,\r\n        isAuth: state.userState.isAuth,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatPage)\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: '100%',\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        toolbar: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            padding: theme.spacing(0, 1),\r\n            ...theme.mixins.toolbar,\r\n        },\r\n        card: {\r\n            display: 'flex',\r\n            justifyContent: \"space-between\",\r\n            flexWrap: \"wrap\"\r\n        },\r\n        controllers: {\r\n            width: \"100%\"\r\n        },\r\n        details: {\r\n            width: \"100%\",\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        content: {\r\n            flex: '1 0 auto',\r\n        },\r\n        cover: {\r\n            width: 151,\r\n        },\r\n    }),\r\n);\r\n","import React, {useEffect} from \"react\";\r\n\r\nimport {Container} from \"@material-ui/core\";\r\nimport Header from \"../../Components/ProfileLayout/Header/Header\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nimport useStyles from './classes'\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\n\r\nimport List from \"@material-ui/core/List\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport * as ChatActions from \"../../store/actions/chatActions\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\n\r\nconst ShatSettingsPage = ({chats, currentChat, fetchChat}) => {\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        // @ts-ignore\r\n        if (currentChat !== 0 && chats.allIds.every(chatId => chatId !== currentChat))\r\n            fetchChat(currentChat)\r\n    }, [])\r\n\r\n    const chat = chats.byId[currentChat]\r\n\r\n    const users = chat && chats.byId[currentChat] && chats.byId[currentChat].connectedUsers ? chats.byId[currentChat].connectedUsers : []\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Container>\r\n                <div className={classes.toolbar}/>\r\n                <Grid justify=\"center\" container spacing={1}>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Card className={classes.card}>\r\n                            <div className={classes.details}>\r\n                                <CardContent className={classes.content}>\r\n                                    <Typography component=\"h5\" variant=\"h5\">\r\n                                        {chat ? chat.chatName : null}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </div>\r\n                            <CardContent className={classes.controllers}>\r\n                                <List\r\n                                    subheader={\r\n                                        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n                                            Users\r\n                                        </ListSubheader>\r\n                                    }\r\n                                    component=\"ul\"\r\n                                >\r\n                                    {users.map((user) => (\r\n                                        <ListItem key={user._id}>\r\n                                            <ListItemIcon>\r\n                                                <AccountCircle/>\r\n                                            </ListItemIcon>\r\n                                            <ListItemText primary={user.name} secondary={user.status}/>\r\n                                        </ListItem>\r\n                                    ))}\r\n                                </List>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Button size=\"small\" color=\"primary\" disabled>\r\n                                    save\r\n                                </Button>\r\n                                <Button size=\"small\" color=\"primary\" disabled>\r\n                                    exit\r\n                                </Button>\r\n                            </CardActions>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        // @ts-ignore\r\n        fetchChat: (chatId) => dispatch(ChatActions.fetchChat(chatId)),\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        chats: state.feedState.chats,\r\n        currentChat: state.feedState.currentChat,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShatSettingsPage)\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            minHeight: 400,\r\n            maxWidth: 400,\r\n            display: 'flex',\r\n            flexWrap: \"wrap\",\r\n            alignContent: \"stretch\",\r\n            alignItems: \"flex-end\",\r\n            justifyContent: \"center\"\r\n        },\r\n        content: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            justifyContent: \"center\"\r\n        },\r\n        actions: {\r\n            marginBottom: 20,\r\n            height: \"100%\"\r\n        }\r\n    }),\r\n);\r\n","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\nimport useStyles from './classes'\r\n\r\nexport default ({children, signInHandler, signUpHandler} : { children: JSX.Element; signInHandler: Function; signUpHandler: Function }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent className={classes.content}>\r\n                {children}\r\n            </CardContent>\r\n            <CardActions className={classes.actions}>\r\n                <ButtonGroup size=\"large\" variant=\"text\">\r\n                    <Button color=\"primary\" onClick={() => signInHandler()}>Sign in</Button>\r\n                    <Button color=\"default\" onClick={() => signUpHandler()}>Sign up</Button>\r\n                </ButtonGroup>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            justifyContent: \"center\",\r\n        },\r\n        inputField: {\r\n            margin: 8,\r\n        }\r\n    }),\r\n);\r\n","import React, {Fragment} from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport {State} from '../../Pages/Login/reducer/fieldsReducer'\r\n\r\nimport useStyles from './classes'\r\n\r\nexport default ({fields, title, changeHandler} : { fields: State; title: string; changeHandler: Function}): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Fragment>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h1\">\r\n                {title}\r\n            </Typography>\r\n            <form className={classes.root} noValidate autoComplete=\"on\">\r\n                {Object.entries(fields).map(([fieldName, {value, valid}]) => (\r\n                    <TextField\r\n                        key={fieldName}\r\n                        className={classes.inputField}\r\n                        value={value}\r\n                        error={!valid}\r\n                        placeholder={fieldName}\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        onChange={(event) => changeHandler(fieldName, event.target.value)}\r\n                    />\r\n                ))}\r\n            </form>\r\n        </Fragment>\r\n    )\r\n}\r\n","import {FieldName, VALIDATE_FIELDS} from './actionTypes'\r\n\r\ninterface Field {\r\n    value: string,\r\n    valid: boolean\r\n}\r\n\r\nexport interface State {\r\n    [x: string]: any\r\n    [FieldName.email]?: Field,\r\n    [FieldName.username]?: Field,\r\n    [FieldName.password]?: Field,\r\n}\r\n\r\nexport const initialState = {\r\n    [FieldName.email]: {\r\n        value: \"\",\r\n        valid: false\r\n    },\r\n    [FieldName.username]: {\r\n        value: \"\",\r\n        valid: false\r\n    },\r\n    [FieldName.password]: {\r\n        value: \"\",\r\n        valid: false\r\n    },\r\n}\r\n\r\nconst validateField = (fieldValue: string):boolean => {\r\n    return fieldValue.length >= 5\r\n}\r\n\r\nexport const reducer = (state: State, action: { type: FieldName | VALIDATE_FIELDS, value?: string }): State => {\r\n    switch (action.type) {\r\n        case FieldName.password:\r\n        case FieldName.username:\r\n        case FieldName.email:\r\n            return {\r\n                ...state,\r\n                [action.type]: {\r\n                    ...state[action.type],\r\n                    value: action.value\r\n                }\r\n            }\r\n        case VALIDATE_FIELDS.all:\r\n            const fields = Object.entries(state).reduce((result:State,[key,{value}]) => ({\r\n                ...result,\r\n                [key]: {\r\n                    // @ts-ignore\r\n                    ...state[key],\r\n                    valid: validateField(value)\r\n                }\r\n            }), {})\r\n            return {\r\n                ...state,\r\n                ...fields\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {FieldName, VALIDATE_FIELDS} from './actionTypes'\r\n\r\nexport const changeField = (fieldName: FieldName, value: string) => {\r\n    return {\r\n        type: fieldName,\r\n        value: value\r\n    }\r\n}\r\n\r\nexport const validateFields = () => {\r\n    return {\r\n        type: VALIDATE_FIELDS.all\r\n    }\r\n}\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            height: \"100vh\",\r\n            flexGrow: 1,\r\n            minWidth: 300,\r\n            transform: 'translateZ(0)',\r\n            '@media all and (-ms-high-contrast: none)': {\r\n                display: 'none',\r\n            },\r\n        },\r\n        modal: {\r\n            display: 'flex',\r\n            padding: theme.spacing(1),\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        },\r\n        paper: {\r\n            width: 400,\r\n            backgroundColor: theme.palette.background.paper,\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3),\r\n        },\r\n    }),\r\n);\r\n","import React, {useReducer, useState} from 'react';\r\nimport Modal from '@material-ui/core/Modal';\r\n\r\nimport LoginFormContainer from \"../../Components/LoginFormContainer/LoginFormContainer\";\r\nimport LoginForm from \"../../Components/LoginForm/LoginForm\";\r\n\r\nimport {reducer, initialState} from \"./reducer/fieldsReducer\";\r\nimport {changeField, validateFields} from \"./reducer/actions\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport useStyles from './classes'\r\nimport {FieldName} from \"./reducer/actionTypes\";\r\nimport {emit} from \"../../utils/util\";\r\nimport {Dispatch} from \"redux\";\r\nimport * as UserAction from \"../../store/actions/userActions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst LoginPage = ({signIn, signUp, isAuth}: { signIn: Function, signUp: Function, isAuth: boolean }) => {\r\n    const [isSignIn, setIsSignIn] = useState(true)\r\n    const [fields, dispatch] = useReducer(reducer, initialState)\r\n\r\n    const classes = useStyles();\r\n\r\n    const rootRef = React.useRef<HTMLDivElement>(null);\r\n\r\n    const signInHandler = () => {\r\n        if (!isSignIn)\r\n            return setIsSignIn(true)\r\n        dispatch(validateFields())\r\n        const signInFields = emit(fields, \"username\")\r\n\r\n        // @ts-ignore\r\n        Object.values(signInFields).every(({valid}) => (valid))\r\n        // @ts-ignore\r\n        signIn(fields.email.value, fields.password.value)\r\n    }\r\n\r\n    const signUpHandler = () => {\r\n        if (isSignIn)\r\n            return setIsSignIn(false)\r\n        dispatch(validateFields())\r\n        Object.values(fields).every(({valid}) => (valid))\r\n        // @ts-ignore\r\n        signUp(fields.email.value, fields.username.value, fields.password.value)\r\n        setIsSignIn(true)\r\n    }\r\n\r\n    if (isAuth)\r\n        return (<Redirect to='/chat'/>)\r\n\r\n    return (\r\n        <div className={classes.root} ref={rootRef}>\r\n            <Modal\r\n                disablePortal\r\n                disableEnforceFocus\r\n                disableAutoFocus\r\n                open\r\n                aria-labelledby=\"server-modal-title\"\r\n                aria-describedby=\"server-modal-description\"\r\n                className={classes.modal}\r\n                container={() => rootRef.current}\r\n            >\r\n                <div>\r\n                    <LoginFormContainer signInHandler={signInHandler} signUpHandler={signUpHandler}>\r\n                        <LoginForm\r\n                            title={isSignIn ? \"Sign in\" : \"Sign up\"}\r\n                            fields={isSignIn ? emit(fields, \"username\") : fields}\r\n                            changeHandler={(fieldName: FieldName, value: string) => dispatch(changeField(fieldName, value))}\r\n                        />\r\n                    </LoginFormContainer>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        // @ts-ignore\r\n        signIn: (email: string, password: string) => dispatch(UserAction.login(email, password)),\r\n        // @ts-ignore\r\n        signUp: (email: string, name: string, password: string) => dispatch(UserAction.signUp(email, name, password))\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.userState.isAuth,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage)\r\n","import React, {useEffect} from 'react';\r\nimport {Redirect, Route, Switch, withRouter} from 'react-router-dom';\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Profile from \"./Pages/Profile/Profile\";\r\nimport Chat from './Pages/Chat/Chat'\r\nimport ChatSettings from \"./Pages/ChatSettings/ChatSettings\";\r\nimport Login from './Pages/Login/Login'\r\nimport {Dispatch} from \"redux\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {fetchUser} from \"./store/actions/userActions\";\r\n\r\nfunction App({login, isAuth}) {\r\n    let history = useHistory();\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('authToken');\r\n        if (Boolean(token) && !isAuth) {\r\n            login()\r\n        } else {\r\n            setTimeout(() => {\r\n                if (!isAuth)\r\n                    history.push('/login')\r\n            }, 1800)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route\r\n                    path=\"/profile\"\r\n                    exact\r\n                    render={() => isAuth ? <Profile/> : <Redirect to=\"/login\"/>}\r\n                />\r\n                <Route\r\n                    path=\"/chatSettings\"\r\n                    exact\r\n                    render={() => isAuth ? <ChatSettings/> : <Redirect to=\"/login\"/>}\r\n                />\r\n                <Route\r\n                    path=\"/login\"\r\n                    exact\r\n                    render={() => <Login/>}\r\n                />\r\n                <Route\r\n                    path=\"/chat\"\r\n                    render={() => <Chat/>}\r\n                />\r\n                <Route\r\n                    path=\"/\"\r\n                    exact\r\n                    render={() => isAuth ? <Redirect to=\"/chat\"/> : <div/>}\r\n                />\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        // @ts-ignore\r\n        login: () => dispatch(fetchUser()),\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.userState.isAuth,\r\n    }\r\n}\r\n\r\nexport default (withRouter(connect(mapStateToProps, mapDispatchToProps)(App)));\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {LoginTypes, LoginActionTypes} from \"../actionTypes/userActionTypes\";\r\n\r\nexport interface User {\r\n    id: number,\r\n    chatIds: ReadonlyArray<number>,\r\n    status: string,\r\n    userName: string,\r\n}\r\n\r\ninterface State {\r\n    isAuth: boolean,\r\n    token: string,\r\n    user: User\r\n}\r\n\r\nconst initialState: State = {\r\n    isAuth: false,\r\n    token: \"\",\r\n    user: {\r\n        id: 0,\r\n        chatIds: [],\r\n        status: \"\",\r\n        userName: \"\",\r\n    },\r\n}\r\n\r\nexport default (state = initialState, action: LoginActionTypes) => {\r\n    switch (action.type){\r\n        case LoginTypes.LOGIN:\r\n            return {\r\n                ...state,\r\n                isAuth: true,\r\n                token: action.token,\r\n                user: {\r\n                    ...state.user,\r\n                    id: action.id,\r\n                    chatIds: action.chatIds,\r\n                    status: action.status,\r\n                    userName: action.userName,\r\n                }\r\n            }\r\n        case LoginTypes.SET_AUTH:\r\n            return {\r\n                ...state,\r\n                isAuth: true\r\n            }\r\n        case LoginTypes.LOGIN_FAIL:\r\n        case LoginTypes.LOGOUT:\r\n            return initialState\r\n        case LoginTypes.CHANGE_STATUS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    ...state.user,\r\n                    status: action.status\r\n                }\r\n            }\r\n        case LoginTypes.CHANGE_USER_NAME_SUCCESS:\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    ...state.user,\r\n                    userName: action.name\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {ChatsActionTypes, ChatTypes} from \"../actionTypes/chatsActionTypes\";\r\nimport {User} from \"./user\";\r\n\r\nexport interface Message {\r\n    text: string,\r\n    creator: string,\r\n    date: Date,\r\n    img: string | null,\r\n    _id: string\r\n}\r\n\r\nexport interface Chat {\r\n    chatName: string,\r\n    messages: ReadonlyArray<Message>,\r\n    connectedUsers: ReadonlyArray<User>\r\n}\r\n\r\nexport interface Chats {\r\n    allIds: ReadonlyArray<string>\r\n    byId: {\r\n        [id: number]: Chat\r\n    }\r\n}\r\n\r\nexport interface UserChat {\r\n    chatId: string,\r\n    chatName: string,\r\n    icon: string | null\r\n}\r\n\r\nexport interface UserChats {\r\n    allIds: ReadonlyArray<number>\r\n    byId: {\r\n        [id: number]: UserChat\r\n    }\r\n}\r\n\r\ninterface State {\r\n    currentChat: number,\r\n    chats: Chats,\r\n    userChats: UserChats,\r\n}\r\n\r\nconst initialState: State = {\r\n    currentChat: 0,\r\n    chats: {\r\n        allIds: [],\r\n        byId: {},\r\n    },\r\n    userChats: {\r\n        allIds: [],\r\n        byId: {}\r\n    },\r\n}\r\nexport default (state = initialState, action: ChatsActionTypes) => {\r\n    switch (action.type) {\r\n        case ChatTypes.SET_CONNECTED_USERS:\r\n            return {\r\n                ...state,\r\n                chats: {\r\n                    ...state.chats,\r\n                    byId: {\r\n                        ...state.chats.byId,\r\n                        [action.chatId]: {\r\n                            ...state.chats.byId[action.chatId],\r\n                            connectedUsers: action.connectedUsers\r\n                        }\r\n                    }\r\n                },\r\n            }\r\n        case ChatTypes.FETCH_CHAT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                chats: {\r\n                    ...state.chats,\r\n                    allIds: [...state.chats.allIds, action.chatId],\r\n                    byId: {\r\n                        ...state.chats.byId,\r\n                        [action.chatId]: {\r\n                            ...state.chats.byId[action.chatId],\r\n                            ...action.chat\r\n                        }\r\n                    }\r\n                },\r\n            }\r\n        case ChatTypes.ADD_CHAT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                chats: {\r\n                    ...state.chats,\r\n                    allIds: [...state.chats.allIds, action.chatId],\r\n                    byId: {\r\n                        ...state.chats.byId,\r\n                        [action.chatId]: {\r\n                            ...state.chats.byId[action.chatId],\r\n                            ...action.chat\r\n                        }\r\n                    }\r\n                },\r\n                userChats: {\r\n                    ...state.chats,\r\n                    allIds: [...state.userChats.allIds, action.chatId],\r\n                    byId: {\r\n                        ...state.userChats.byId,\r\n                        [action.chatId]: {\r\n                            chatName: action.chat.chatName,\r\n                            icon: null\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        case ChatTypes.FETCH_USER_CHATS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                userChats: action.userChats\r\n            }\r\n        case ChatTypes.CHANGE_CURRENT_CHAT:\r\n            return {\r\n                ...state,\r\n                currentChat: action.chatId\r\n            }\r\n        case ChatTypes.FETCH_USER_MESSAGES_SUCCESS:\r\n            console.log(state.chats)\r\n            return {\r\n                ...state,\r\n                chats: {\r\n                    ...state.chats,\r\n                    byId: {\r\n                        ...state.chats.byId,\r\n                        [action.chatId]: {\r\n                            ...state.chats.byId[action.chatId],\r\n                            messages: action.messages\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        case ChatTypes.RECEIVE_MESSAGE:\r\n            return {\r\n                ...state,\r\n                chats: {\r\n                    ...state.chats,\r\n                    byId: {\r\n                        ...state.chats.byId,\r\n                        [action.chatId]: {\r\n                            messages: [...state.chats.byId[action.chatId].messages, action.message].filter((message, index, self) => (\r\n                                    index === self.findIndex((messageToCompare) => (\r\n                                        messageToCompare._id === message._id\r\n                                    ))\r\n                                )\r\n                            ),\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {createStore, applyMiddleware, compose, combineReducers} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {Provider} from 'react-redux'\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nimport userReducer from './store/reducers/user'\r\nimport feedReducer from './store/reducers/chats'\r\nimport socket from \"./socket\";\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose : null;\r\n\r\nconst rootReducer = combineReducers({\r\n    userState: userReducer,\r\n    feedState: feedReducer\r\n});\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(\r\n        applyMiddleware(thunk)\r\n    )\r\n);\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <CssBaseline/>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}